name: Mac with MPICH

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.jpg'
      - '**/*.png'
      - 'docs/*'
      - 'case_studies/*'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.jpg'
      - '**/*.png'
      - 'docs/*'
      - 'case_studies/*'

env:
   MPICH_VERSION: 4.1.2
   NETCDF_VERSION: 4.9.2

jobs:
    build:
      runs-on: macos-latest
      timeout-minutes: 60
      steps:
        - uses: actions/checkout@v4.1.1
        - name: Set up dependencies
          run: |
            brew install automake autoconf libtool m4 open-mpi zlib cmake
        - name: Install HDF5
          run: |
            cd ${GITHUB_WORKSPACE}
            rm -rf HDF5 ; mkdir HDF5 ; cd HDF5
            wget -cq https://github.com/HDFGroup/hdf5/releases/latest/download/hdf5.tar.gz
            tar -zxf hdf5.tar.gz
            ln -sf hdf5-* hdf5
            cd hdf5
            mkdir build
            cd build
            cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/HDF5 -DHDF5_ENABLE_PARALLEL=ON -DHDF5_ENABLE_THREADSAFE=ON \
               -DHDF5_ALLOW_UNSUPPORTED=ON -DBUILD_TESTING=OFF -DHDF5_BUILD_HL_LIB=OFF \
               -DHDF5_BUILD_EXAMPLES=OFF -DHDF5_BUILD_TOOLS:BOOL=OFF \
               -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=mpicc ..
            make -j2 install
        - name: Install NetCDF
          run: |
            cd ${GITHUB_WORKSPACE}
            rm -rf /NetCDF ; mkdir NetCDF ; cd NetCDF
            wget -qc https://github.com/Unidata/netcdf-c/archive/refs/tags/v${NETCDF_VERSION}.tar.gz
            tar -zxf v${NETCDF_VERSION}.tar.gz
            cd netcdf-c-${NETCDF_VERSION}
            ./configure --prefix=${GITHUB_WORKSPACE}/NetCDF \
                        --silent \
                        --disable-dap \
                        --disable-nczarr \
                        --disable-nczarr-filters \
                        --disable-filter-testing \
                        --disable-byterange \
                        CC=mpicc \
                        CPPFLAGS="-I${GITHUB_WORKSPACE}/HDF5/include" \
                        LDFLAGS="-L${GITHUB_WORKSPACE}/HDF5/lib" \
                        LIBS="-lhdf5"
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install > qout 2>&1
            make -s -j 8 distclean >> qout 2>&1
        - name: Configure Log VOL connector
          run: |
            cd ${GITHUB_WORKSPACE}
            autoreconf -i
            ./configure --with-hdf5=${GITHUB_WORKSPACE}/HDF5 \
                        --enable-test-netcdf4=${GITHUB_WORKSPACE}/NetCDF \
                        CFLAGS="-O0 -g" CXXFLAGS="-O0 -g -std=c++14" LIBS=-lstdc++
            # Do NOT test QMCPACK, as it requires FFTW which fails to build
        - name: Print config.log if error
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat config.log
        - name: Build Log VOL connector
          if: ${{ success() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            make -j 8
            # Do NOT parallel build, cmake for external tests can fail
            make tests
            # Skip all test runs for unknown reason of programs hanging
            # Do NOT test QMCPACK, as it requires FFTW which fails to build
            # Do NOT test hdf5-iotest, as uuid_generate_time_safe not available on mac osx
            # make check
            # make ptest
            # make -s V=1 LIBTOOLFLAGS=--silent distcheck DISTCHECK_CONFIGURE_FLAGS="--silent --with-hdf5=${GITHUB_WORKSPACE}/HDF5 --enable-shared CXXFLAGS='-O0 -g -std=c++14' LIBS=-lstdc++"
        - name: make distclean
          if: ${{ always() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            make -s distclean

