/*
 *  Copyright (C) 2022, Northwestern University and Argonne National Laboratory
 *  See COPYRIGHT notice in top-level directory.
 */
/* $Id$ */

#ifndef _logVOL_H_
#define _logVOL_H_

#include "H5VLpublic.h"
#include "hdf5.h"

#define H5VL_LOG_VERSION       "@H5VL_LOG_VERSION@"
#define H5VL_LOG_VERSION_MAJOR @H5VL_LOG_VERSION_MAJOR @
#define H5VL_LOG_VERSION_MINOR @H5VL_LOG_VERSION_MINOR @
#define H5VL_LOG_VERSION_SUB   @H5VL_LOG_VERSION_SUB @
#define H5VL_LOG_RELEASE_DATE  "@H5VL_LOG_RELEASE_DATE@"

#define H5VL_LOG_HAVE_METADATA_COMPRESSION @ENABLE_ZLIB @
#define H5VL_LOG_HAVE_INTERNAL_PROFILING   @ENABLE_PROFILING @

/* Identifier for the pass-through VOL connector */
#define H5VL_log (H5VL_log_register ())

#ifdef __cplusplus
extern "C" {
#endif

// Constants
#define LOG_VOL_BSIZE_UNLIMITED -1
#define H5S_CONTIG \
    H5S_BLOCK  // H5S_CONTIG serves the purpose of H5S_BLOCK before HDF5 introduces it
#define H5VL_LOG_SUBFILING_OFF           0
#define H5VL_LOG_SUBFILING_FILE_PER_NODE 0

typedef struct H5VL_log_info_t {
    hid_t uvlid;          /* VOL ID for under VOL */
    void *under_vol_info; /* VOL info for under VOL */
} H5VL_log_info_t;

typedef enum H5VL_log_req_type_t {
    H5VL_LOG_REQ_BLOCKING    = 0,  // Default
    H5VL_LOG_REQ_NONBLOCKING = 1
} H5VL_log_req_type_t;

typedef enum H5VL_log_sel_encoding_t {
    H5VL_LOG_ENCODING_OFFSET    = 0,  // Default
    H5VL_LOG_ENCODING_CANONICAL = 1
} H5VL_log_sel_encoding_t;

typedef enum H5VL_log_data_layout_t {
    H5VL_LOG_DATA_LAYOUT_CONTIG        = 0,  // Default
    H5VL_LOG_DATA_LAYOUT_CHUNK_ALIGNED = 1
} H5VL_log_data_layout_t;

extern const H5VL_class_t H5VL_log_g;

hid_t H5VL_log_register (void);

// Querying functions for dynamic loading
H5PL_type_t H5PLget_plugin_type (void);
const void *H5PLget_plugin_info (void);

// Warn
herr_t H5Dwrite_n (hid_t did,
                   hid_t mem_type_id,
                   int n,
                   hsize_t **starts,
                   hsize_t **counts,
                   hid_t dxplid,
                   void *buf);
herr_t H5Dread_n (hid_t did,
                  hid_t mem_type_id,
                  int n,
                  hsize_t **starts,
                  hsize_t **counts,
                  hid_t dxplid,
                  void *buf);

// Helper functions
herr_t H5Pset_buffered (hid_t plist, hbool_t buffered);
herr_t H5Pget_buffered (hid_t plist, hbool_t *buffered);

// Maps to H5Pset_buffered and H5Pget_buffered for backward compatibility
inline herr_t H5Pset_nonblocking (hid_t plist, H5VL_log_req_type_t nonblocking) {
    return H5Pset_buffered (plist, nonblocking == H5VL_LOG_REQ_BLOCKING ? true : false);
}
inline herr_t H5Pget_nonblocking (hid_t plist, H5VL_log_req_type_t *nonblocking) {
    herr_t err;
    hbool_t ret;

    err          = H5Pget_buffered (plist, &ret);
    *nonblocking = ret == true ? H5VL_LOG_REQ_BLOCKING : H5VL_LOG_REQ_NONBLOCKING;

    return err;
}

herr_t H5Pset_nb_buffer_size (hid_t plist, size_t size);
herr_t H5Pget_nb_buffer_size (hid_t plist, ssize_t *size);

herr_t H5Pset_idx_buffer_size (hid_t plist, size_t size);
herr_t H5Pget_idx_buffer_size (hid_t plist, ssize_t *size);

herr_t H5Pset_meta_merge (hid_t plist, hbool_t merge);
herr_t H5Pget_meta_merge (hid_t plist, hbool_t *merge);

herr_t H5Pset_meta_share (hid_t plist, hbool_t share);
herr_t H5Pget_meta_share (hid_t plist, hbool_t *share);

herr_t H5Pset_meta_zip (hid_t plist, hbool_t zip);
herr_t H5Pget_meta_zip (hid_t plist, hbool_t *zip);

herr_t H5Pset_sel_encoding (hid_t plist, H5VL_log_sel_encoding_t encoding);
herr_t H5Pget_sel_encoding (hid_t plist, H5VL_log_sel_encoding_t *encoding);

herr_t H5Pset_data_layout (hid_t plist, H5VL_log_data_layout_t layout);
herr_t H5Pget_data_layout (hid_t plist, H5VL_log_data_layout_t *layout);

herr_t H5Pset_subfiling (hid_t plist, int nsubfiles);
herr_t H5Pget_subfiling (hid_t plist, int *nsubfiles);

herr_t H5Pset_single_subfile_read (hid_t plist, hbool_t single_subfile_read);
herr_t H5Pget_single_subfile_read (hid_t plist, hbool_t *single_subfile_read);

herr_t H5Pget_passthru (hid_t faplid, hbool_t *enable);
herr_t H5Pset_passthru (hid_t faplid, hbool_t enable);

#ifdef __cplusplus
}
#endif

#endif
